pragma solidity ^0.4.0;

 contract AccessControlMethod{

 address public owner;
 address public subject;
address public object;
Inspector public jc;

 event ReturnAccessResult(
 address indexed _from,
 string _errmsg,
 bool _result,
 uint _time,
 uint _punishment
 );

// importan node consider the action as subject (20 bytes ethereum address and resource)
 struct Misbehavior{
 string res; //resource on which the misbehavior is conducted
 string action; //action (e.g., "read", "write", "execute") of the misbehavior
 string misbehavior; //misbehavior
 uint time; //time of the misbehavior occured
 uint punishment; //penalty opposed to the subject (number of minutes blocked)
 }

 struct BehaviorItem{ //for one resource
 Misbehavior [] mbs; //misbehavior list of the subject on a particular resource
 uint BlockUntil; //time when the resource is unblocked (0 if unblocked; otherwise,blocked)
 }

 struct PolicyItem{ //for one (resource, action) pair;
 bool isValued; //for duplicate check
 string permission; //permission: "allow" or "deny"
 uint minInterval; //minimum allowable interval (in seconds) between two successive requests
 uint LRT; //Time of Last Request
 uint NoRR; //Number of frequent Requests in a short period of time
 uint threshold; //threshold on NoRR, above which a misbehavior is suspected
 string location;
 string timerange;
 string action;
 bool result; //last access result
 uint8 err; //last err code
 string user2;
 string user3;
 }

 mapping (bytes32 => mapping(bytes32 => PolicyItem)) policies; //mapping (resource, action) =>PolicyCriteria for policy check
 mapping (bytes32 => BehaviorItem) behaviors; //mapping resource => BehaviorCriteria for behaviorcheck


 /*convert strings to byte32*/
 function stringToBytes32(string _str) public constant returns (bytes32) {
    bytes memory tempBytes = bytes(_str);
    bytes32 convertedBytes;
    if(0 == tempBytes.length){
     return 0x0;
 }
 assembly {
 convertedBytes := mload(add(_str, 32))
 }
 return convertedBytes;
 }

 function AccessControlMethod(address _subject) public{
 owner = msg.sender;
 object = msg.sender;
 subject = _subject;
 }
 function setJC(address _jc)public{
 if(owner == msg.sender){
 jc = Inspector(_jc);
 }
 else throw;

 }

//important treat the first action as the id of the subject (20 bytes) and the other action as the default action
 function policyAdd(string _resource, string _action, string _user2, string _user3,  string _permission, string _newaction, string _location, string _timerange, uint _minInterval, uint
_threshold) public{
 bytes32 resource = stringToBytes32(_resource);
 bytes32 action = stringToBytes32(_action);
 if(msg.sender == owner){
 if(policies[resource][action].isValued) throw; //duplicated key
 else{
 policies[resource][action].permission = _permission;
 policies[resource][action].minInterval = _minInterval;
 policies[resource][action].user2= _user2;
  policies[resource][action].user3= _user3;
 policies[resource][action].threshold = _threshold;
  policies[resource][action].location = _location;
   policies[resource][action].timerange = _timerange;
 policies[resource][action].LRT = 0;
 policies[resource][action].NoRR = 0;
 policies[resource][action].isValued = true;
 policies[resource][action].result = false;
 behaviors[resource].BlockUntil = 0;
 }
 }
 else throw;
 }

 function getPolicy(string _resource, string _action) public constant returns (string _permission, uint
_minInterval, uint _threshold, uint _LRT, uint _NoRR, bool _res, uint8 _errcode){
 bytes32 resource = stringToBytes32(_resource);
 bytes32 action = stringToBytes32(_action);
 if(policies[resource][action].isValued){
 _permission = policies[resource][action].permission;
 _minInterval = policies[resource][action].minInterval;
 _threshold = policies[resource][action].threshold;
 _NoRR = policies[resource][action].NoRR;
 _LRT = policies[resource][action].LRT;
 _res = policies[resource][action].result;
 _errcode = policies[resource][action].err;
 }
 else throw;

 }

 function policyUpdate(string _resource, string _action, string _newaction, string _location, string _timerange, string _newPermission) public{
 bytes32 resource = stringToBytes32(_resource);
 bytes32 action = stringToBytes32(_action);
 if(policies[resource][action].isValued){
policies[resource][action].action = _newaction;
policies[resource][action].location = _location;
policies[resource][action].timerange = _timerange;
 policies[resource][action].permission = _newPermission;
 }
 else throw;
 }

 function minIntervalUpdate(string _resource, string _action, uint _newMinInterval) public{
 bytes32 resource = stringToBytes32(_resource);
 bytes32 action = stringToBytes32(_action);
 if(policies[resource][action].isValued){
 policies[resource][action].minInterval= _newMinInterval;
 }
 else throw;
 }

 function thresholdUpdate(string _resource, string _action, uint _newThreshold) public{
 bytes32 resource = stringToBytes32(_resource);
 bytes32 action = stringToBytes32(_action);
 if(policies[resource][action].isValued){
 policies[resource][action].threshold= _newThreshold;
 }
 else throw;
 }
 
 function locationUpdate(string _resource, string _action, string _location) public{
 bytes32 resource = stringToBytes32(_resource);
 bytes32 action = stringToBytes32(_action);
 if(policies[resource][action].isValued){
 policies[resource][action].location = _location;;
 }
 else throw;
 }
 
 function timerangeUpdate(string _resource, string _action, string _timerange) public{
 bytes32 resource = stringToBytes32(_resource);
 bytes32 action = stringToBytes32(_action);
 if(policies[resource][action].isValued){
 policies[resource][action].timerange = _timerange;
 }
 else throw;
 }

// A policy is uniquely identified by resource, action and resource pair

 function policyDelete(string _resource, string _action) public{
 bytes32 resource = stringToBytes32(_resource);
 bytes32 action = stringToBytes32(_action);
 if(msg.sender == owner){
 if(policies[resource][action].isValued){
 delete policies[resource][action];
 }
 else throw;
 }
 else throw;
 }

 /*Use event*/
 function accessControl(string _resource, string _action, uint _time) public{

 bool policycheck = false;
 bool behaviorcheck = true;
 uint8 errcode = 0;
 uint punishment = 0;

 if (msg.sender == subject){
 bytes32 resource = stringToBytes32(_resource);
 bytes32 action = stringToBytes32(_action);

 if(behaviors[resource].BlockUntil >= _time){//still blocked state
 errcode = 1; //"Requests are blocked!"
 }

 else{//unblocked state
 if(behaviors[resource].BlockUntil > 0){
 behaviors[resource].BlockUntil = 0;
 policies[resource][action].NoRR = 0;
 policies[resource][action].LRT = 0;
 }
 //policy check

 //behavior check
 if (_time - policies[resource][action].LRT <= policies[resource][action].minInterval){
 policies[resource][action].NoRR++;
 if(policies[resource][action].NoRR >= policies[resource][action].threshold){
 punishment = jc.inspectBehavior(subject, object, _resource, _action, "Too frequent access!", _time);
 behaviorcheck = false;
 behaviors[resource].BlockUntil = _time + punishment * 1 minutes;
 behaviors[resource].mbs.push(Misbehavior(_resource, _action, "Too frequent access!", _time, punishment));//problem occurs when using array
 }
 }
 else{
 policies[resource][action].NoRR = 0;
 }
 if(!policycheck && behaviorcheck) errcode = 2; //"Static Check failed!"
 if(policycheck && !behaviorcheck) errcode = 3; //"Misbehavior detected!"
 if(!policycheck && !behaviorcheck) errcode = 4; //"Static check failed! & Misbehavior detected!";
 }
 policies[resource][action].LRT = _time;
 }
 else {
 errcode = 5; //"Wrong object or subject detected!";
 }
 policies[resource][action].result = policycheck && behaviorcheck;
 policies[resource][action].err = errcode;
 if(0 == errcode) ReturnAccessResult(msg.sender, "Access authorized!", true, _time, punishment);
 if(1 == errcode) ReturnAccessResult(msg.sender, "Requests are blocked!", false, _time, punishment);
 if(2 == errcode) ReturnAccessResult(msg.sender, "Static Check failed!", false, _time, punishment);
 if(3 == errcode) ReturnAccessResult(msg.sender, "Misbehavior detected!", false, _time, punishment);
 if(4 == errcode) ReturnAccessResult(msg.sender, "Static check failed! & Misbehavior detected!",
false, _time, punishment);
 if(5 == errcode) ReturnAccessResult(msg.sender, "Wrong object or subject specified!", false, _time,
punishment);
 }


 function getTimeofUnblock(string _resource) public constant returns(uint _punishment, uint
_BlockUntil){
 bytes32 resource= stringToBytes32(_resource);
 _BlockUntil = behaviors[resource].BlockUntil;
 uint l = behaviors[resource].mbs.length;
 _punishment = behaviors[resource].mbs[l - 1].punishment;
 }


 function deleteACC() public{
 if(msg.sender == owner){
 selfdestruct(this);
 }
 }
 }
